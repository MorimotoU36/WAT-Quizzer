import Head from 'next/head';
import { Inter } from 'next/font/google';
import { Button, Card, CardContent, CardHeader, Container, Select, SelectChangeEvent, TextField } from '@mui/material';
import { useEffect, useState } from 'react';
import { post } from '@/common/API';
import { ProcessingApiReponse } from '../../interfaces/api/response';
import { Layout } from '@/components/templates/layout/Layout';
import { MessageCard } from '@/components/ui-parts/messageCard/MessageCard';
import { Title } from '@/components/ui-elements/title/Title';
import { getBook } from '@/common/response';
import { PullDownOptionState } from '../../interfaces/state';
import { PullDown } from '@/components/ui-elements/pullDown/PullDown';
import { AddBookButton } from '@/components/ui-parts/button-patterns/addBook/AddBook.button';
import { AddSayingButton } from '@/components/ui-parts/button-patterns/addSaying/AddSaying.button';

const inter = Inter({ subsets: ['latin'] });

const cardStyle = {
  margin: '10px 0'
};

const cardContentStyle = {
  display: 'flex',
  width: '100%'
};

const inputTextBeforeButtonStyle = {
  flex: 'auto'
};

export default function Settings() {
  const [booklistoption, setBooklistoption] = useState<PullDownOptionState[]>([]);
  const [bookName, setBookName] = useState<string>('');
  const [selectedBookId, setSelectedBookId] = useState<number>(-1);
  const [inputSaying, setInputSaying] = useState<string>('');
  const [message, setMessage] = useState({
    message: '　',
    messageColor: 'common.black'
  });

  useEffect(() => {
    getBook(setMessage, setBooklistoption);
  }, []);

  const selectedFileChange = (e: SelectChangeEvent<number>) => {
    setSelectedBookId(+e.target.value);
  };

  const addSaying = () => {
    if (!selectedBookId) {
      setMessage({ message: 'エラー:本名を選択して下さい', messageColor: 'error' });
      return;
    } else if (!inputSaying || inputSaying === '') {
      setMessage({ message: 'エラー:格言を入力して下さい', messageColor: 'error' });
      return;
    }

    setMessage({ message: '通信中...', messageColor: '#d3d3d3' });
    post(
      '/saying',
      {
        book_id: selectedBookId,
        saying: inputSaying
      },
      (data: ProcessingApiReponse) => {
        if (data.status === 200 || data.status === 201) {
          setMessage({ message: `新規格言「${inputSaying}」を追加しました`, messageColor: 'success.light' });
        } else {
          setMessage({ message: 'エラー:外部APIとの連携に失敗しました', messageColor: 'error' });
        }
      }
    );
    getBook(setMessage, setBooklistoption);
  };

  const contents = () => {
    return (
      <>
        <Head>
          <title>設定</title>
          {/* <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" /> */}
        </Head>
        <Container>
          <Title label="WAT Quizzer - 設定"></Title>

          <MessageCard messageState={message}></MessageCard>

          <Card variant="outlined" style={cardStyle}>
            <CardHeader title="格言設定" />
            <CardContent>
              <Card variant="outlined">
                <CardHeader subheader="新規追加 - 啓発本" />
                <CardContent style={cardContentStyle}>
                  <TextField
                    label="新規啓発本名"
                    variant="outlined"
                    onChange={(e) => {
                      setBookName(e.target.value);
                    }}
                    style={inputTextBeforeButtonStyle}
                  />
                  <AddBookButton
                    bookName={bookName}
                    setMessageStater={setMessage}
                    setBooklistoption={setBooklistoption}
                    attr={'after-inline'}
                  />
                </CardContent>
                <CardHeader subheader="格言追加" />

                <CardContent style={cardContentStyle}>
                  <PullDown label={''} optionList={booklistoption} onChange={selectedFileChange} />
                </CardContent>
                <CardContent style={cardContentStyle}>
                  <TextField
                    label="新規格言"
                    variant="outlined"
                    onChange={(e) => {
                      setInputSaying(e.target.value);
                    }}
                    style={inputTextBeforeButtonStyle}
                  />
                  <AddSayingButton
                    selectedBookId={selectedBookId}
                    inputSaying={inputSaying}
                    setMessageStater={setMessage}
                    setBooklistoption={setBooklistoption}
                    attr={'after-inline'}
                  />
                </CardContent>
              </Card>
            </CardContent>
          </Card>
        </Container>
      </>
    );
  };

  return (
    <>
      <Layout mode="settings" contents={contents()} title={'設定'} />
    </>
  );
}
