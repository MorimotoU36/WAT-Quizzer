generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.md"
  includeRelationFromFields = "true"
  theme                     = "forest"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model answer_log {
  id           Int       @id @default(autoincrement())
  is_corrected Boolean?
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime? @db.Timestamp(6)
  quiz_id      Int
  quiz         quiz      @relation(fields: [quiz_id], references: [id])
}

model englishbot_answer_log {
  id         Int       @id @default(autoincrement())
  word_id    Int
  result     Boolean?
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  test_type  Int       @default(0)
  word       word      @relation(fields: [word_id], references: [id])
}

model example {
  id                  Int                   @id @default(autoincrement())
  en_example_sentense String                @db.VarChar(256)
  ja_example_sentense String                @db.VarChar(256)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @updatedAt
  deleted_at          DateTime?             @db.Timestamp(6)
  example_explanation example_explanation[]
  word_example        word_example[]
}

model example_explanation {
  id          Int       @id @default(autoincrement())
  example_id  Int
  explanation String    @db.VarChar(256)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @db.Timestamp(6)
  example     example   @relation(fields: [example_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model mean {
  id               Int           @id @default(autoincrement())
  word_id          Int
  wordmean_id      Int
  partsofspeech_id Int
  meaning          String        @db.VarChar(256)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @updatedAt
  deleted_at       DateTime?     @db.Timestamp(6)
  partsofspeech    partsofspeech @relation(fields: [partsofspeech_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  word             word          @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([word_id, wordmean_id])
}

model partsofspeech {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  mean       mean[]
}

model quiz {
  id                    Int                           @id @default(autoincrement())
  file_num              Int
  quiz_num              Int
  quiz_sentense         String                        @unique @db.VarChar(256)
  answer                String                        @db.VarChar(256)
  img_file              String?                       @db.VarChar(128)
  checked               Boolean?                      @default(false)
  created_at            DateTime                      @default(now()) @db.Timestamp(6)
  updated_at            DateTime                      @updatedAt
  deleted_at            DateTime?                     @db.Timestamp(6)
  format_id             Int
  answer_log            answer_log[]
  quiz_format           quiz_format                   @relation(fields: [format_id], references: [id])
  quiz_advanced_linkage quiz_basis_advanced_linkage[] @relation("advanced")
  quiz_basis_linkage    quiz_basis_advanced_linkage[] @relation("basis")
  quiz_category         quiz_category[]
  quiz_dummy_choice     quiz_dummy_choice[]
  quiz_explanation      quiz_explanation?
  quiz_statistics_view  quiz_statistics_view?         @relation(fields: [id], references: [id])

  @@unique([file_num, quiz_num])
}

model quiz_basis_advanced_linkage {
  id                 Int       @id @default(autoincrement())
  basis_quiz_id      Int
  advanced_quiz_id   Int
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  updated_at         DateTime  @updatedAt
  deleted_at         DateTime? @db.Timestamp(6)
  quiz_advanced_link quiz      @relation("advanced", fields: [advanced_quiz_id], references: [id])
  quiz_basis_link    quiz      @relation("basis", fields: [basis_quiz_id], references: [id])

  @@unique([basis_quiz_id, advanced_quiz_id])
}

model quiz_category {
  id         Int       @id @default(autoincrement())
  category   String?   @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  quiz_id    Int
  quiz       quiz      @relation(fields: [quiz_id], references: [id])

  @@unique([quiz_id, category])
}

model quiz_dependency {
  id                  Int       @id @default(autoincrement())
  preliminary_quiz_id Int
  quiz_id             Int
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime? @db.Timestamp(6)
}

model quiz_dummy_choice {
  id                    Int       @id @default(autoincrement())
  quiz_id               Int
  dummy_choice_sentense String    @db.VarChar(256)
  created_at            DateTime  @default(now()) @db.Timestamp(6)
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime? @db.Timestamp(6)
  is_corrected          Boolean   @default(false)
  quiz                  quiz      @relation(fields: [quiz_id], references: [id])
}

model quiz_explanation {
  id          Int       @id @default(autoincrement())
  quiz_id     Int       @unique
  explanation String
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @db.Timestamp(6)
  quiz        quiz      @relation(fields: [quiz_id], references: [id])
}

model quiz_file {
  file_num      Int       @id @default(autoincrement())
  file_name     String    @unique @db.VarChar(256)
  file_nickname String    @unique @db.VarChar(256)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime? @db.Timestamp(6)
}

model quiz_format {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  quiz       quiz[]
}

model quiz_similarity {
  id                  Int       @id @default(autoincrement())
  similarity_group_id Int
  quiz_id             Int
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime? @db.Timestamp(6)

  @@unique([similarity_group_id, quiz_id])
}

model quiz_similarity_group {
  id                    Int       @id @default(autoincrement())
  similarity_group_name String    @db.VarChar(256)
  created_at            DateTime  @default(now()) @db.Timestamp(6)
  updated_at            DateTime  @updatedAt
  deleted_at            DateTime? @db.Timestamp(6)
}

model saying {
  id             Int           @id @default(autoincrement())
  book_id        Int
  book_saying_id Int
  saying         String        @unique @db.VarChar(256)
  explanation    String
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime      @updatedAt
  deleted_at     DateTime?     @db.Timestamp(6)
  selfhelp_book  selfhelp_book @relation(fields: [book_id], references: [id])
}

model selfhelp_book {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  saying     saying[]
}

model source {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(256)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @updatedAt
  deleted_at  DateTime?     @db.Timestamp(6)
  word_source word_source[]
}

model word {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar(256)
  pronounce             String                  @db.VarChar(256)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @updatedAt
  deleted_at            DateTime?               @db.Timestamp(6)
  checked               Boolean                 @default(false)
  antonym_word          antonym[]               @relation("antonym_word_id")
  antonym_original      antonym[]               @relation("antonym_original_id")
  derivative            derivative?
  englishbot_answer_log englishbot_answer_log[]
  mean                  mean[]
  synonym_word          synonym[]               @relation("synonym_word_id")
  synonym_original      synonym[]               @relation("synonym_original_id")
  word_etymology        word_etymology[]
  word_example          word_example[]
  word_source           word_source[]
  word_subsource        word_subsource[]
  word_statistics_view  word_statistics_view?   @relation(fields: [id], references: [id])
}

model word_etymology {
  id           Int       @id @default(autoincrement())
  etymology_id Int
  word_id      Int
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime? @db.Timestamp(6)
  etymology    etymology @relation(fields: [etymology_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  word         word      @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([etymology_id, word_id])
}

model etymology {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(256)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?        @db.Timestamp(6)
  word_etymology word_etymology[]
}

model word_example {
  example_sentense_id Int
  word_id             Int
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime? @db.Timestamp(6)
  example             example   @relation(fields: [example_sentense_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  word                word      @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([example_sentense_id, word_id])
}

model synonym {
  id               Int       @id @default(autoincrement())
  word_id          Int
  synonym_word_id  Int
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime? @db.Timestamp(6)
  synonym_word     word      @relation("synonym_word_id", fields: [synonym_word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  synonym_original word      @relation("synonym_original_id", fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([word_id, synonym_word_id])
}

model antonym {
  id               Int       @id @default(autoincrement())
  word_id          Int
  antonym_word_id  Int
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime? @db.Timestamp(6)
  antonym_word     word      @relation("antonym_word_id", fields: [antonym_word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  antonym_original word      @relation("antonym_original_id", fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([word_id, antonym_word_id])
}

model derivative {
  id                  Int              @id @default(autoincrement())
  derivative_group_id Int
  word_id             Int              @unique
  created_at          DateTime         @default(now()) @db.Timestamp(6)
  updated_at          DateTime         @updatedAt
  deleted_at          DateTime?        @db.Timestamp(6)
  derivative_group    derivative_group @relation(fields: [derivative_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  word                word             @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model derivative_group {
  id                    Int          @id @default(autoincrement())
  derivative_group_name String       @db.VarChar(256)
  created_at            DateTime     @default(now()) @db.Timestamp(6)
  updated_at            DateTime     @updatedAt
  deleted_at            DateTime?    @db.Timestamp(6)
  derivative            derivative[]
}

model word_source {
  id         Int       @id @default(autoincrement())
  word_id    Int
  source_id  Int
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  source     source    @relation(fields: [source_id], references: [id])
  word       word      @relation(fields: [word_id], references: [id])

  @@unique([word_id, source_id])
}

model word_subsource {
  id         Int       @id @default(autoincrement())
  word_id    Int
  subsource  String    @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamp(6)
  word       word      @relation(fields: [word_id], references: [id])

  @@unique([word_id, subsource])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view category_view {
  file_num           Int
  category           String   @db.VarChar(256)
  count              BigInt?
  sum_of_clear_count Decimal? @db.Decimal
  sum_of_fail_count  Decimal? @db.Decimal
  accuracy_rate      Decimal? @db.Decimal

  @@unique([file_num, category])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view quiz_file_view {
  file_num      Int      @unique
  file_name     String?  @db.VarChar(256)
  file_nickname String?  @db.VarChar(256)
  count         BigInt?
  clear         Decimal? @db.Decimal
  fail          Decimal? @db.Decimal
  not_answered  Decimal? @db.Decimal
  accuracy_rate Decimal? @db.Decimal
  process_rate  Decimal? @db.Decimal
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view quiz_statistics_view {
  id                     Int       @unique
  clear_count            BigInt?
  fail_count             BigInt?
  answer_count           BigInt?
  accuracy_rate          BigInt?
  last_answer_log        DateTime? @db.Timestamp(6)
  last_failed_answer_log DateTime? @db.Timestamp(6)
  quiz                   quiz[]
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view quiz_view {
  id            Int       @unique
  file_num      Int?
  quiz_num      Int?
  quiz_sentense String?   @db.VarChar(256)
  answer        String?   @db.VarChar(256)
  img_file      String?   @db.VarChar(128)
  checked       Boolean?
  clear_count   BigInt?
  fail_count    BigInt?
  not_answered  Boolean?
  created_at    DateTime? @db.Timestamp(6)
  updated_at    DateTime?
  deleted_at    DateTime? @db.Timestamp(6)
  accuracy_rate BigInt?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view word_summarize {
  name  String @unique
  count BigInt
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view word_statistics_view {
  id              Int       @unique
  name            String?   @db.VarChar(256)
  clear_count     BigInt?
  fail_count      BigInt?
  accuracy_rate   BigInt?
  last_answer_log DateTime? @db.Timestamp(6)
  word            word[]
}
