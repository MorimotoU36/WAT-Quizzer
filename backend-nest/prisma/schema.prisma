generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model advanced_quiz {
  id                            Int                            @id @default(autoincrement())
  file_num                      Int
  quiz_num                      Int
  advanced_quiz_type_id         Int
  quiz_sentense                 String                         @unique @db.VarChar(256)
  answer                        String                         @db.VarChar(256)
  img_file                      String?                        @db.VarChar(128)
  checked                       Boolean?                       @default(false)
  created_at                    DateTime                       @default(now()) @db.Timestamp(6)
  updated_at                    DateTime                       @default(now()) @db.Timestamp(6)
  deleted_at                    DateTime?                      @db.Timestamp(6)
  advanced_quiz_type            advanced_quiz_type             @relation(fields: [advanced_quiz_type_id], references: [id])
  quiz_file                     quiz_file                      @relation(fields: [file_num], references: [file_num])
  advanced_quiz_explanation     advanced_quiz_explanation?
  dummy_choice                  dummy_choice[]
  quiz_basis_advanced_linkage   quiz_basis_advanced_linkage[]
  advanced_quiz_statistics_view advanced_quiz_statistics_view? @relation(fields: [id], references: [id])

  @@unique([file_num, quiz_num])
}

model advanced_quiz_explanation {
  id               Int           @id @default(autoincrement())
  advanced_quiz_id Int           @unique
  explanation      String
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?     @db.Timestamp(6)
  advanced_quiz    advanced_quiz @relation(fields: [advanced_quiz_id], references: [id])
}

model advanced_quiz_type {
  id            Int             @id @default(autoincrement())
  type_name     String          @unique @db.VarChar(256)
  type_nickname String          @db.VarChar(256)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?       @db.Timestamp(6)
  advanced_quiz advanced_quiz[]
}

model answer_log {
  id             Int       @id @default(autoincrement())
  quiz_format_id Int
  file_num       Int
  quiz_num       Int
  is_corrected   Boolean?
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @default(now()) @db.Timestamp(6)
  deleted_at     DateTime? @db.Timestamp(6)
}

model dummy_choice {
  id                    Int           @id @default(autoincrement())
  advanced_quiz_id      Int
  dummy_choice_sentense String        @db.VarChar(256)
  created_at            DateTime      @default(now()) @db.Timestamp(6)
  updated_at            DateTime      @default(now()) @db.Timestamp(6)
  deleted_at            DateTime?     @db.Timestamp(6)
  advanced_quiz         advanced_quiz @relation(fields: [advanced_quiz_id], references: [id])
}

model englishbot_answer_log {
  id         Int       @id @default(autoincrement())
  word_id    Int
  result     Boolean?
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  test_type  Int       @default(0)
  word       word      @relation(fields: [word_id], references: [id])
}

model example {
  id                  Int            @id @default(autoincrement())
  en_example_sentense String         @db.VarChar(256)
  ja_example_sentense String         @db.VarChar(256)
  created_at          DateTime       @default(now()) @db.Timestamp(6)
  updated_at          DateTime       @default(now()) @db.Timestamp(6)
  deleted_at          DateTime?      @db.Timestamp(6)
  mean_example        mean_example[]
}

model idiom {
  id         Int          @id @default(autoincrement())
  word_id    Int
  name       String       @db.VarChar(256)
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  deleted_at DateTime?    @db.Timestamp(6)
  word       word         @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  idiom_mean idiom_mean[]
}

model idiom_mean {
  id               Int           @id @default(autoincrement())
  idiom_id         Int
  idiommean_id     Int
  partsofspeech_id Int
  meaning          String        @db.VarChar(256)
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?     @db.Timestamp(6)
  idiom            idiom         @relation(fields: [idiom_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partsofspeech    partsofspeech @relation(fields: [partsofspeech_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([idiom_id, idiommean_id])
}

model mean {
  id               Int            @id @default(autoincrement())
  word_id          Int
  wordmean_id      Int
  partsofspeech_id Int
  meaning          String         @db.VarChar(256)
  created_at       DateTime       @default(now()) @db.Timestamp(6)
  updated_at       DateTime       @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?      @db.Timestamp(6)
  partsofspeech    partsofspeech  @relation(fields: [partsofspeech_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  word             word           @relation(fields: [word_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mean_example     mean_example[]

  @@unique([word_id, wordmean_id])
}

model mean_example {
  example_sentense_id Int
  mean_id             Int
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @default(now()) @db.Timestamp(6)
  deleted_at          DateTime? @db.Timestamp(6)
  example             example   @relation(fields: [example_sentense_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mean                mean      @relation(fields: [mean_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([example_sentense_id, mean_id])
}

model partsofspeech {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(256)
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  deleted_at DateTime?    @db.Timestamp(6)
  idiom_mean idiom_mean[]
  mean       mean[]
}

model quiz {
  id                          Int                           @id @default(autoincrement())
  file_num                    Int
  quiz_num                    Int
  quiz_sentense               String                        @unique @db.VarChar(256)
  answer                      String                        @db.VarChar(256)
  img_file                    String?                       @db.VarChar(128)
  checked                     Boolean?                      @default(false)
  created_at                  DateTime                      @default(now()) @db.Timestamp(6)
  updated_at                  DateTime                      @default(now()) @db.Timestamp(6)
  deleted_at                  DateTime?                     @db.Timestamp(6)
  quiz_basis_advanced_linkage quiz_basis_advanced_linkage[]
  quiz_category               quiz_category[]
  quiz_statistics_view        quiz_statistics_view?         @relation(fields: [id], references: [id])

  @@unique([file_num, quiz_num])
}

model quiz_basis_advanced_linkage {
  id               Int           @id @default(autoincrement())
  file_num         Int
  basis_quiz_id    Int
  advanced_quiz_id Int
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  deleted_at       DateTime?     @db.Timestamp(6)
  advanced_quiz    advanced_quiz @relation(fields: [advanced_quiz_id], references: [id])
  quiz             quiz          @relation(fields: [basis_quiz_id], references: [id])

  @@unique([basis_quiz_id, advanced_quiz_id])
}

model quiz_category {
  id         Int       @id @default(autoincrement())
  file_num   Int
  quiz_num   Int
  category   String?   @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  quiz       quiz      @relation(fields: [file_num, quiz_num], references: [file_num, quiz_num])

  @@unique([file_num, quiz_num, category])
}

model quiz_dependency {
  id                  Int       @id @default(autoincrement())
  preliminary_quiz_id Int
  quiz_id             Int
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @default(now()) @db.Timestamp(6)
  deleted_at          DateTime? @db.Timestamp(6)
}

model quiz_file {
  file_num      Int             @id @default(autoincrement())
  file_name     String          @unique @db.VarChar(256)
  file_nickname String          @unique @db.VarChar(256)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  deleted_at    DateTime?       @db.Timestamp(6)
  advanced_quiz advanced_quiz[]
}

model quiz_format {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
}

model quiz_similarity {
  id                  Int       @id @default(autoincrement())
  similarity_group_id Int
  quiz_id             Int
  created_at          DateTime  @default(now()) @db.Timestamp(6)
  updated_at          DateTime  @default(now()) @db.Timestamp(6)
  deleted_at          DateTime? @db.Timestamp(6)

  @@unique([similarity_group_id, quiz_id])
}

model quiz_similarity_group {
  id                    Int       @id @default(autoincrement())
  similarity_group_name String    @db.VarChar(256)
  created_at            DateTime  @default(now()) @db.Timestamp(6)
  updated_at            DateTime  @default(now()) @db.Timestamp(6)
  deleted_at            DateTime? @db.Timestamp(6)
}

model saying {
  id             Int           @id @default(autoincrement())
  book_id        Int
  book_saying_id Int
  saying         String        @unique @db.VarChar(256)
  explanation    String
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime      @default(now()) @db.Timestamp(6)
  deleted_at     DateTime?     @db.Timestamp(6)
  selfhelp_book  selfhelp_book @relation(fields: [book_id], references: [id])
}

model selfhelp_book {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  saying     saying[]
}

model source {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(256)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  deleted_at  DateTime?     @db.Timestamp(6)
  word_source word_source[]
}

model word {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique @db.VarChar(256)
  pronounce             String                  @db.VarChar(256)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  updated_at            DateTime                @default(now()) @db.Timestamp(6)
  deleted_at            DateTime?               @db.Timestamp(6)
  englishbot_answer_log englishbot_answer_log[]
  idiom                 idiom[]
  mean                  mean[]
  word_source           word_source[]
  word_subsource        word_subsource[]
  word_statistics_view  word_statistics_view?   @relation(fields: [id], references: [id])
}

model word_etymology {
  id                      Int       @id @default(autoincrement())
  word_etymology_group_id Int
  word_id                 Int
  created_at              DateTime  @default(now()) @db.Timestamp(6)
  updated_at              DateTime  @default(now()) @db.Timestamp(6)
  deleted_at              DateTime? @db.Timestamp(6)

  @@unique([word_etymology_group_id, word_id])
}

model word_etymology_group {
  id                        Int       @id @default(autoincrement())
  word_etymology_group_name String    @db.VarChar(256)
  created_at                DateTime  @default(now()) @db.Timestamp(6)
  updated_at                DateTime  @default(now()) @db.Timestamp(6)
  deleted_at                DateTime? @db.Timestamp(6)
}

model word_similarity {
  id                       Int       @id @default(autoincrement())
  word_similarity_group_id Int
  word_id                  Int
  created_at               DateTime  @default(now()) @db.Timestamp(6)
  updated_at               DateTime  @default(now()) @db.Timestamp(6)
  deleted_at               DateTime? @db.Timestamp(6)

  @@unique([word_similarity_group_id, word_id])
}

model word_similarity_group {
  id                         Int       @id @default(autoincrement())
  word_similarity_group_name String    @db.VarChar(256)
  created_at                 DateTime  @default(now()) @db.Timestamp(6)
  updated_at                 DateTime  @default(now()) @db.Timestamp(6)
  deleted_at                 DateTime? @db.Timestamp(6)
}

model word_source {
  id         Int       @id @default(autoincrement())
  word_id    Int
  source_id  Int
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  source     source    @relation(fields: [source_id], references: [id])
  word       word      @relation(fields: [word_id], references: [id])

  @@unique([word_id, source_id])
}

model word_subsource {
  id         Int       @id @default(autoincrement())
  word_id    Int
  subsource  String    @db.VarChar(256)
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at DateTime? @db.Timestamp(6)
  word       word      @relation(fields: [word_id], references: [id])

  @@unique([word_id, subsource])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view advanced_quiz_statistics_view {
  id                     Int             @unique
  clear_count            BigInt?
  fail_count             BigInt?
  answer_count           BigInt?
  accuracy_rate          BigInt?
  last_answer_log        DateTime?       @db.Timestamp(6)
  last_failed_answer_log DateTime?       @db.Timestamp(6)
  advanced_quiz          advanced_quiz[]
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view advanced_quiz_view {
  id                    Int       @unique
  file_num              Int?
  quiz_num              Int?
  advanced_quiz_type_id Int?
  quiz_sentense         String?   @db.VarChar(256)
  answer                String?   @db.VarChar(256)
  img_file              String?   @db.VarChar(128)
  checked               Boolean?
  clear_count           BigInt?
  fail_count            BigInt?
  created_at            DateTime? @db.Timestamp(6)
  updated_at            DateTime? @db.Timestamp(6)
  deleted_at            DateTime? @db.Timestamp(6)
  accuracy_rate         BigInt?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view category_view {
  file_num           Int
  category           String   @db.VarChar(256)
  count              BigInt?
  sum_of_clear_count Decimal? @db.Decimal
  sum_of_fail_count  Decimal? @db.Decimal
  accuracy_rate      Decimal? @db.Decimal

  @@unique([file_num, category])
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view quiz_file_view {
  file_num               Int      @unique
  file_name              String?  @db.VarChar(256)
  file_nickname          String?  @db.VarChar(256)
  basic_quiz_count       BigInt?
  basic_clear            Decimal? @db.Decimal
  basic_fail             Decimal? @db.Decimal
  basic_accuracy_rate    Decimal? @db.Decimal
  advanced_quiz_count    BigInt?
  advanced_clear         Decimal? @db.Decimal
  advanced_fail          Decimal? @db.Decimal
  advanced_accuracy_rate Decimal? @db.Decimal
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view quiz_statistics_view {
  id                     Int       @unique
  clear_count            BigInt?
  fail_count             BigInt?
  answer_count           BigInt?
  accuracy_rate          BigInt?
  last_answer_log        DateTime? @db.Timestamp(6)
  last_failed_answer_log DateTime? @db.Timestamp(6)
  quiz                   quiz[]
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view quiz_view {
  id            Int       @unique
  file_num      Int?
  quiz_num      Int?
  quiz_sentense String?   @db.VarChar(256)
  answer        String?   @db.VarChar(256)
  img_file      String?   @db.VarChar(128)
  checked       Boolean?
  clear_count   BigInt?
  fail_count    BigInt?
  created_at    DateTime? @db.Timestamp(6)
  updated_at    DateTime? @db.Timestamp(6)
  deleted_at    DateTime? @db.Timestamp(6)
  accuracy_rate BigInt?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view word_summarize {
  name  String @unique
  count BigInt
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view word_statistics_view {
  id              Int       @unique
  name            String?   @db.VarChar(256)
  clear_count     BigInt?
  fail_count      BigInt?
  last_answer_log DateTime? @db.Timestamp(6)
  word            word[]
}
